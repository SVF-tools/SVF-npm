# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "3.0.0")
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 3.0.0...3.29)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS SVF::SvfFlags SVF::SvfCore SVF::SvfLLVM SVF::ae SVF::cfl SVF::dvf SVF::llvm2svf SVF::mta SVF::saber SVF::svf-ex SVF::wpa)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target SVF::SvfFlags
add_library(SVF::SvfFlags INTERFACE IMPORTED)

set_target_properties(SVF::SvfFlags PROPERTIES
  INTERFACE_COMPILE_FEATURES "c_std_11;cxx_std_17"
  INTERFACE_COMPILE_OPTIONS "\$<\$<NOT:\$<BOOL:ON>>:-fno-rtti>"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/SVF;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_DIRECTORIES "${_IMPORT_PREFIX}/lib"
  INTERFACE_LINK_LIBRARIES "z3::libz3"
  INTERFACE_LINK_OPTIONS "\$<\$<NOT:\$<BOOL:ON>>:-fno-rtti>"
  INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "include/SVF;include"
)

# Create imported target SVF::SvfCore
add_library(SVF::SvfCore SHARED IMPORTED)

set_target_properties(SVF::SvfCore PROPERTIES
  INTERFACE_LINK_LIBRARIES "SVF::SvfFlags"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(SVF::SvfCore
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/SVF"
      FILES "${_IMPORT_PREFIX}/include/SVF/AE/Core/AbstractState.h" "${_IMPORT_PREFIX}/include/SVF/AE/Core/AbstractValue.h" "${_IMPORT_PREFIX}/include/SVF/AE/Core/AddressValue.h" "${_IMPORT_PREFIX}/include/SVF/AE/Core/ICFGWTO.h" "${_IMPORT_PREFIX}/include/SVF/AE/Core/IntervalValue.h" "${_IMPORT_PREFIX}/include/SVF/AE/Core/NumericValue.h" "${_IMPORT_PREFIX}/include/SVF/AE/Core/RelExeState.h" "${_IMPORT_PREFIX}/include/SVF/AE/Core/RelationSolver.h" "${_IMPORT_PREFIX}/include/SVF/AE/Svfexe/AEDetector.h" "${_IMPORT_PREFIX}/include/SVF/AE/Svfexe/AbsExtAPI.h" "${_IMPORT_PREFIX}/include/SVF/AE/Svfexe/AbstractInterpretation.h" "${_IMPORT_PREFIX}/include/SVF/CFL/CFGNormalizer.h" "${_IMPORT_PREFIX}/include/SVF/CFL/CFGrammar.h" "${_IMPORT_PREFIX}/include/SVF/CFL/CFLAlias.h" "${_IMPORT_PREFIX}/include/SVF/CFL/CFLBase.h" "${_IMPORT_PREFIX}/include/SVF/CFL/CFLGramGraphChecker.h" "${_IMPORT_PREFIX}/include/SVF/CFL/CFLGraphBuilder.h" "${_IMPORT_PREFIX}/include/SVF/CFL/CFLSVFGBuilder.h" "${_IMPORT_PREFIX}/include/SVF/CFL/CFLSolver.h" "${_IMPORT_PREFIX}/include/SVF/CFL/CFLStat.h" "${_IMPORT_PREFIX}/include/SVF/CFL/CFLVF.h" "${_IMPORT_PREFIX}/include/SVF/CFL/GrammarBuilder.h" "${_IMPORT_PREFIX}/include/SVF/DDA/ContextDDA.h" "${_IMPORT_PREFIX}/include/SVF/DDA/DDAClient.h" "${_IMPORT_PREFIX}/include/SVF/DDA/DDAPass.h" "${_IMPORT_PREFIX}/include/SVF/DDA/DDAStat.h" "${_IMPORT_PREFIX}/include/SVF/DDA/DDAVFSolver.h" "${_IMPORT_PREFIX}/include/SVF/DDA/FlowDDA.h" "${_IMPORT_PREFIX}/include/SVF/FastCluster/fastcluster.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/BasicBlockG.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/CDG.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/CFLGraph.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/CHG.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/CallGraph.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/ConsG.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/ConsGEdge.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/ConsGNode.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/DOTGraphTraits.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/GenericGraph.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/GraphPrinter.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/GraphTraits.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/GraphWriter.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/ICFG.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/ICFGEdge.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/ICFGNode.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/ICFGStat.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/IRGraph.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/SCC.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/SVFG.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/SVFGEdge.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/SVFGNode.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/SVFGOPT.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/SVFGStat.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/ThreadCallGraph.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/VFG.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/VFGEdge.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/VFGNode.h" "${_IMPORT_PREFIX}/include/SVF/Graphs/WTO.h" "${_IMPORT_PREFIX}/include/SVF/MSSA/MSSAMuChi.h" "${_IMPORT_PREFIX}/include/SVF/MSSA/MemPartition.h" "${_IMPORT_PREFIX}/include/SVF/MSSA/MemRegion.h" "${_IMPORT_PREFIX}/include/SVF/MSSA/MemSSA.h" "${_IMPORT_PREFIX}/include/SVF/MSSA/SVFGBuilder.h" "${_IMPORT_PREFIX}/include/SVF/MTA/LockAnalysis.h" "${_IMPORT_PREFIX}/include/SVF/MTA/MHP.h" "${_IMPORT_PREFIX}/include/SVF/MTA/MTA.h" "${_IMPORT_PREFIX}/include/SVF/MTA/MTAStat.h" "${_IMPORT_PREFIX}/include/SVF/MTA/TCT.h" "${_IMPORT_PREFIX}/include/SVF/MemoryModel/AbstractPointsToDS.h" "${_IMPORT_PREFIX}/include/SVF/MemoryModel/AccessPath.h" "${_IMPORT_PREFIX}/include/SVF/MemoryModel/ConditionalPT.h" "${_IMPORT_PREFIX}/include/SVF/MemoryModel/MutablePointsToDS.h" "${_IMPORT_PREFIX}/include/SVF/MemoryModel/PersistentPointsToCache.h" "${_IMPORT_PREFIX}/include/SVF/MemoryModel/PersistentPointsToDS.h" "${_IMPORT_PREFIX}/include/SVF/MemoryModel/PointerAnalysis.h" "${_IMPORT_PREFIX}/include/SVF/MemoryModel/PointerAnalysisImpl.h" "${_IMPORT_PREFIX}/include/SVF/MemoryModel/PointsTo.h" "${_IMPORT_PREFIX}/include/SVF/MemoryModel/SVFLoop.h" "${_IMPORT_PREFIX}/include/SVF/SABER/DoubleFreeChecker.h" "${_IMPORT_PREFIX}/include/SVF/SABER/FileChecker.h" "${_IMPORT_PREFIX}/include/SVF/SABER/LeakChecker.h" "${_IMPORT_PREFIX}/include/SVF/SABER/ProgSlice.h" "${_IMPORT_PREFIX}/include/SVF/SABER/SaberCheckerAPI.h" "${_IMPORT_PREFIX}/include/SVF/SABER/SaberCondAllocator.h" "${_IMPORT_PREFIX}/include/SVF/SABER/SaberSVFGBuilder.h" "${_IMPORT_PREFIX}/include/SVF/SABER/SrcSnkDDA.h" "${_IMPORT_PREFIX}/include/SVF/SABER/SrcSnkSolver.h" "${_IMPORT_PREFIX}/include/SVF/SVFIR/ObjTypeInfo.h" "${_IMPORT_PREFIX}/include/SVF/SVFIR/PAGBuilderFromFile.h" "${_IMPORT_PREFIX}/include/SVF/SVFIR/SVFIR.h" "${_IMPORT_PREFIX}/include/SVF/SVFIR/SVFStatements.h" "${_IMPORT_PREFIX}/include/SVF/SVFIR/SVFType.h" "${_IMPORT_PREFIX}/include/SVF/SVFIR/SVFValue.h" "${_IMPORT_PREFIX}/include/SVF/SVFIR/SVFVariables.h" "${_IMPORT_PREFIX}/include/SVF/Util/Annotator.h" "${_IMPORT_PREFIX}/include/SVF/Util/BitVector.h" "${_IMPORT_PREFIX}/include/SVF/Util/CDGBuilder.h" "${_IMPORT_PREFIX}/include/SVF/Util/CallGraphBuilder.h" "${_IMPORT_PREFIX}/include/SVF/Util/Casting.h" "${_IMPORT_PREFIX}/include/SVF/Util/CommandLine.h" "${_IMPORT_PREFIX}/include/SVF/Util/CoreBitVector.h" "${_IMPORT_PREFIX}/include/SVF/Util/CxtStmt.h" "${_IMPORT_PREFIX}/include/SVF/Util/DPItem.h" "${_IMPORT_PREFIX}/include/SVF/Util/ExtAPI.h" "${_IMPORT_PREFIX}/include/SVF/Util/GeneralType.h" "${_IMPORT_PREFIX}/include/SVF/Util/GraphReachSolver.h" "${_IMPORT_PREFIX}/include/SVF/Util/NodeIDAllocator.h" "${_IMPORT_PREFIX}/include/SVF/Util/Options.h" "${_IMPORT_PREFIX}/include/SVF/Util/PTAStat.h" "${_IMPORT_PREFIX}/include/SVF/Util/SVFBugReport.h" "${_IMPORT_PREFIX}/include/SVF/Util/SVFLoopAndDomInfo.h" "${_IMPORT_PREFIX}/include/SVF/Util/SVFStat.h" "${_IMPORT_PREFIX}/include/SVF/Util/SVFUtil.h" "${_IMPORT_PREFIX}/include/SVF/Util/SparseBitVector.h" "${_IMPORT_PREFIX}/include/SVF/Util/ThreadAPI.h" "${_IMPORT_PREFIX}/include/SVF/Util/WorkList.h" "${_IMPORT_PREFIX}/include/SVF/Util/Z3Expr.h" "${_IMPORT_PREFIX}/include/SVF/Util/cJSON.h" "${_IMPORT_PREFIX}/include/SVF/Util/iterator.h" "${_IMPORT_PREFIX}/include/SVF/Util/iterator_range.h" "${_IMPORT_PREFIX}/include/SVF/WPA/Andersen.h" "${_IMPORT_PREFIX}/include/SVF/WPA/AndersenPWC.h" "${_IMPORT_PREFIX}/include/SVF/WPA/CSC.h" "${_IMPORT_PREFIX}/include/SVF/WPA/FlowSensitive.h" "${_IMPORT_PREFIX}/include/SVF/WPA/Steensgaard.h" "${_IMPORT_PREFIX}/include/SVF/WPA/TypeAnalysis.h" "${_IMPORT_PREFIX}/include/SVF/WPA/VersionedFlowSensitive.h" "${_IMPORT_PREFIX}/include/SVF/WPA/WPAFSSolver.h" "${_IMPORT_PREFIX}/include/SVF/WPA/WPAPass.h" "${_IMPORT_PREFIX}/include/SVF/WPA/WPASolver.h" "${_IMPORT_PREFIX}/include/SVF/WPA/WPAStat.h"
  )
else()
  set_property(TARGET SVF::SvfCore
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/SVF"
  )
endif()

# Create imported target SVF::SvfLLVM
add_library(SVF::SvfLLVM SHARED IMPORTED)

set_target_properties(SVF::SvfLLVM PROPERTIES
  INTERFACE_LINK_LIBRARIES "SVF::SvfFlags;SVF::SvfCore;LLVM"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(SVF::SvfLLVM
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/SVF"
      FILES "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/BasicTypes.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/BreakConstantExpr.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/CHGBuilder.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/CppUtil.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/DCHG.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/GEPTypeBridgeIterator.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/ICFGBuilder.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/LLVMLoopAnalysis.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/LLVMModule.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/LLVMUtil.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/ObjTypeInference.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/SVFIRBuilder.h" "${_IMPORT_PREFIX}/include/SVF/SVF-LLVM/SymbolTableBuilder.h"
  )
else()
  set_property(TARGET SVF::SvfLLVM
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/SVF"
  )
endif()

# Create imported target SVF::ae
add_executable(SVF::ae IMPORTED)

# Create imported target SVF::cfl
add_executable(SVF::cfl IMPORTED)

# Create imported target SVF::dvf
add_executable(SVF::dvf IMPORTED)

# Create imported target SVF::llvm2svf
add_executable(SVF::llvm2svf IMPORTED)

# Create imported target SVF::mta
add_executable(SVF::mta IMPORTED)

# Create imported target SVF::saber
add_executable(SVF::saber IMPORTED)

# Create imported target SVF::svf-ex
add_executable(SVF::svf-ex IMPORTED)

# Create imported target SVF::wpa
add_executable(SVF::wpa IMPORTED)

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/SVFTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  if(CMAKE_VERSION VERSION_LESS "3.28"
      OR NOT DEFINED _cmake_import_check_xcframework_for_${_cmake_target}
      OR NOT IS_DIRECTORY "${_cmake_import_check_xcframework_for_${_cmake_target}}")
    foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
      if(NOT EXISTS "${_cmake_file}")
        message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
      endif()
    endforeach()
  endif()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
