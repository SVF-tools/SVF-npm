# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.26)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS SvfCore cfl dvf svf-ex llvm2svf mta saber wpa ae SvfLLVM)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Create imported target SvfCore
add_library(SvfCore STATIC IMPORTED)

set_target_properties(SvfCore PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/Users/runner/work/SVF/SVF/svf/include;/Users/runner/work/SVF/SVF/svf/include"
  INTERFACE_LINK_LIBRARIES "/Users/runner/work/SVF/SVF/z3.obj/bin/libz3.dylib"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(SvfCore
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "/Users/runner/work/SVF/SVF/svf/include"
      FILES "/Users/runner/work/SVF/SVF/svf/include/AE/Core/AbstractValue.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/AddressValue.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/BoundedZ3Expr.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/CFBasicBlockGWTO.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/ConsExeState.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/ExeState.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/ICFGWTO.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/IntervalExeState.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/IntervalValue.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/NumericLiteral.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/RelExeState.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/RelationSolver.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/SingleAbsValue.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Core/SymState.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Svfexe/AbstractExecution.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Svfexe/BufOverflowChecker.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Svfexe/SVFIR2ConsExeState.h" "/Users/runner/work/SVF/SVF/svf/include/AE/Svfexe/SVFIR2ItvExeState.h" "/Users/runner/work/SVF/SVF/svf/include/CFL/CFGNormalizer.h" "/Users/runner/work/SVF/SVF/svf/include/CFL/CFGrammar.h" "/Users/runner/work/SVF/SVF/svf/include/CFL/CFLAlias.h" "/Users/runner/work/SVF/SVF/svf/include/CFL/CFLBase.h" "/Users/runner/work/SVF/SVF/svf/include/CFL/CFLGramGraphChecker.h" "/Users/runner/work/SVF/SVF/svf/include/CFL/CFLGraphBuilder.h" "/Users/runner/work/SVF/SVF/svf/include/CFL/CFLSVFGBuilder.h" "/Users/runner/work/SVF/SVF/svf/include/CFL/CFLSolver.h" "/Users/runner/work/SVF/SVF/svf/include/CFL/CFLStat.h" "/Users/runner/work/SVF/SVF/svf/include/CFL/CFLVF.h" "/Users/runner/work/SVF/SVF/svf/include/CFL/GrammarBuilder.h" "/Users/runner/work/SVF/SVF/svf/include/DDA/ContextDDA.h" "/Users/runner/work/SVF/SVF/svf/include/DDA/DDAClient.h" "/Users/runner/work/SVF/SVF/svf/include/DDA/DDAPass.h" "/Users/runner/work/SVF/SVF/svf/include/DDA/DDAStat.h" "/Users/runner/work/SVF/SVF/svf/include/DDA/DDAVFSolver.h" "/Users/runner/work/SVF/SVF/svf/include/DDA/FlowDDA.h" "/Users/runner/work/SVF/SVF/svf/include/FastCluster/fastcluster.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/CDG.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/CFBasicBlockG.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/CFLGraph.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/CHG.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/ConsG.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/ConsGEdge.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/ConsGNode.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/DOTGraphTraits.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/GenericGraph.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/GraphPrinter.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/GraphTraits.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/GraphWriter.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/ICFG.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/ICFGEdge.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/ICFGNode.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/ICFGStat.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/IRGraph.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/PTACallGraph.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/SCC.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/SVFG.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/SVFGEdge.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/SVFGNode.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/SVFGOPT.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/SVFGStat.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/ThreadCallGraph.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/VFG.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/VFGEdge.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/VFGNode.h" "/Users/runner/work/SVF/SVF/svf/include/Graphs/WTO.h" "/Users/runner/work/SVF/SVF/svf/include/MSSA/MSSAMuChi.h" "/Users/runner/work/SVF/SVF/svf/include/MSSA/MemPartition.h" "/Users/runner/work/SVF/SVF/svf/include/MSSA/MemRegion.h" "/Users/runner/work/SVF/SVF/svf/include/MSSA/MemSSA.h" "/Users/runner/work/SVF/SVF/svf/include/MSSA/SVFGBuilder.h" "/Users/runner/work/SVF/SVF/svf/include/MTA/FSMPTA.h" "/Users/runner/work/SVF/SVF/svf/include/MTA/LockAnalysis.h" "/Users/runner/work/SVF/SVF/svf/include/MTA/MHP.h" "/Users/runner/work/SVF/SVF/svf/include/MTA/MTA.h" "/Users/runner/work/SVF/SVF/svf/include/MTA/MTAResultValidator.h" "/Users/runner/work/SVF/SVF/svf/include/MTA/MTAStat.h" "/Users/runner/work/SVF/SVF/svf/include/MTA/PCG.h" "/Users/runner/work/SVF/SVF/svf/include/MTA/TCT.h" "/Users/runner/work/SVF/SVF/svf/include/MemoryModel/AbstractPointsToDS.h" "/Users/runner/work/SVF/SVF/svf/include/MemoryModel/AccessPath.h" "/Users/runner/work/SVF/SVF/svf/include/MemoryModel/ConditionalPT.h" "/Users/runner/work/SVF/SVF/svf/include/MemoryModel/MutablePointsToDS.h" "/Users/runner/work/SVF/SVF/svf/include/MemoryModel/PersistentPointsToCache.h" "/Users/runner/work/SVF/SVF/svf/include/MemoryModel/PersistentPointsToDS.h" "/Users/runner/work/SVF/SVF/svf/include/MemoryModel/PointerAnalysis.h" "/Users/runner/work/SVF/SVF/svf/include/MemoryModel/PointerAnalysisImpl.h" "/Users/runner/work/SVF/SVF/svf/include/MemoryModel/PointsTo.h" "/Users/runner/work/SVF/SVF/svf/include/MemoryModel/SVFLoop.h" "/Users/runner/work/SVF/SVF/svf/include/SABER/DoubleFreeChecker.h" "/Users/runner/work/SVF/SVF/svf/include/SABER/FileChecker.h" "/Users/runner/work/SVF/SVF/svf/include/SABER/LeakChecker.h" "/Users/runner/work/SVF/SVF/svf/include/SABER/ProgSlice.h" "/Users/runner/work/SVF/SVF/svf/include/SABER/SaberCheckerAPI.h" "/Users/runner/work/SVF/SVF/svf/include/SABER/SaberCondAllocator.h" "/Users/runner/work/SVF/SVF/svf/include/SABER/SaberSVFGBuilder.h" "/Users/runner/work/SVF/SVF/svf/include/SABER/SrcSnkDDA.h" "/Users/runner/work/SVF/SVF/svf/include/SABER/SrcSnkSolver.h" "/Users/runner/work/SVF/SVF/svf/include/SVFIR/PAGBuilderFromFile.h" "/Users/runner/work/SVF/SVF/svf/include/SVFIR/SVFFileSystem.h" "/Users/runner/work/SVF/SVF/svf/include/SVFIR/SVFIR.h" "/Users/runner/work/SVF/SVF/svf/include/SVFIR/SVFModule.h" "/Users/runner/work/SVF/SVF/svf/include/SVFIR/SVFStatements.h" "/Users/runner/work/SVF/SVF/svf/include/SVFIR/SVFType.h" "/Users/runner/work/SVF/SVF/svf/include/SVFIR/SVFValue.h" "/Users/runner/work/SVF/SVF/svf/include/SVFIR/SVFVariables.h" "/Users/runner/work/SVF/SVF/svf/include/SVFIR/SymbolTableInfo.h" "/Users/runner/work/SVF/SVF/svf/include/Util/Annotator.h" "/Users/runner/work/SVF/SVF/svf/include/Util/BitVector.h" "/Users/runner/work/SVF/SVF/svf/include/Util/CDGBuilder.h" "/Users/runner/work/SVF/SVF/svf/include/Util/CFBasicBlockGBuilder.h" "/Users/runner/work/SVF/SVF/svf/include/Util/CallGraphBuilder.h" "/Users/runner/work/SVF/SVF/svf/include/Util/Casting.h" "/Users/runner/work/SVF/SVF/svf/include/Util/CommandLine.h" "/Users/runner/work/SVF/SVF/svf/include/Util/CoreBitVector.h" "/Users/runner/work/SVF/SVF/svf/include/Util/CxtStmt.h" "/Users/runner/work/SVF/SVF/svf/include/Util/DPItem.h" "/Users/runner/work/SVF/SVF/svf/include/Util/ExtAPI.h" "/Users/runner/work/SVF/SVF/svf/include/Util/GeneralType.h" "/Users/runner/work/SVF/SVF/svf/include/Util/GraphReachSolver.h" "/Users/runner/work/SVF/SVF/svf/include/Util/NodeIDAllocator.h" "/Users/runner/work/SVF/SVF/svf/include/Util/Options.h" "/Users/runner/work/SVF/SVF/svf/include/Util/PTAStat.h" "/Users/runner/work/SVF/SVF/svf/include/Util/SVFBugReport.h" "/Users/runner/work/SVF/SVF/svf/include/Util/SVFStat.h" "/Users/runner/work/SVF/SVF/svf/include/Util/SVFUtil.h" "/Users/runner/work/SVF/SVF/svf/include/Util/SparseBitVector.h" "/Users/runner/work/SVF/SVF/svf/include/Util/ThreadAPI.h" "/Users/runner/work/SVF/SVF/svf/include/Util/WorkList.h" "/Users/runner/work/SVF/SVF/svf/include/Util/Z3Expr.h" "/Users/runner/work/SVF/SVF/svf/include/Util/cJSON.h" "/Users/runner/work/SVF/SVF/svf/include/Util/iterator.h" "/Users/runner/work/SVF/SVF/svf/include/Util/iterator_range.h" "/Users/runner/work/SVF/SVF/svf/include/WPA/Andersen.h" "/Users/runner/work/SVF/SVF/svf/include/WPA/AndersenPWC.h" "/Users/runner/work/SVF/SVF/svf/include/WPA/CSC.h" "/Users/runner/work/SVF/SVF/svf/include/WPA/FlowSensitive.h" "/Users/runner/work/SVF/SVF/svf/include/WPA/Steensgaard.h" "/Users/runner/work/SVF/SVF/svf/include/WPA/TypeAnalysis.h" "/Users/runner/work/SVF/SVF/svf/include/WPA/VersionedFlowSensitive.h" "/Users/runner/work/SVF/SVF/svf/include/WPA/WPAFSSolver.h" "/Users/runner/work/SVF/SVF/svf/include/WPA/WPAPass.h" "/Users/runner/work/SVF/SVF/svf/include/WPA/WPASolver.h" "/Users/runner/work/SVF/SVF/svf/include/WPA/WPAStat.h"
  )
else()
  set_property(TARGET SvfCore
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "/Users/runner/work/SVF/SVF/svf/include"
  )
endif()

# Create imported target cfl
add_executable(cfl IMPORTED)

# Create imported target dvf
add_executable(dvf IMPORTED)

# Create imported target svf-ex
add_executable(svf-ex IMPORTED)

# Create imported target llvm2svf
add_executable(llvm2svf IMPORTED)

# Create imported target mta
add_executable(mta IMPORTED)

# Create imported target saber
add_executable(saber IMPORTED)

# Create imported target wpa
add_executable(wpa IMPORTED)

# Create imported target ae
add_executable(ae IMPORTED)

# Create imported target SvfLLVM
add_library(SvfLLVM STATIC IMPORTED)

set_target_properties(SvfLLVM PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/Users/runner/work/SVF/SVF/svf-llvm/include;/Users/runner/work/SVF/SVF/svf-llvm/include"
  INTERFACE_LINK_LIBRARIES "/Users/runner/work/SVF/SVF/z3.obj/bin/libz3.dylib;LLVM;LLVM;SvfCore"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(SvfLLVM
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "/Users/runner/work/SVF/SVF/svf-llvm/include"
      FILES "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/BasicTypes.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/BreakConstantExpr.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/CHGBuilder.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/CppUtil.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/DCHG.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/ICFGBuilder.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/LLVMLoopAnalysis.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/LLVMModule.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/LLVMUtil.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/ObjTypeInference.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/SVFIRBuilder.h" "/Users/runner/work/SVF/SVF/svf-llvm/include/SVF-LLVM/SymbolTableBuilder.h"
  )
else()
  set_property(TARGET SvfLLVM
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "/Users/runner/work/SVF/SVF/svf-llvm/include"
  )
endif()

# Import target "SvfCore" for configuration "Release"
set_property(TARGET SvfCore APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(SvfCore PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
  IMPORTED_LOCATION_RELEASE "/Users/runner/work/SVF/SVF/Release-build/lib/libSvfCore.a"
  )

# Import target "cfl" for configuration "Release"
set_property(TARGET cfl APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(cfl PROPERTIES
  IMPORTED_LOCATION_RELEASE "/Users/runner/work/SVF/SVF/Release-build/bin/cfl"
  )

# Import target "dvf" for configuration "Release"
set_property(TARGET dvf APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(dvf PROPERTIES
  IMPORTED_LOCATION_RELEASE "/Users/runner/work/SVF/SVF/Release-build/bin/dvf"
  )

# Import target "svf-ex" for configuration "Release"
set_property(TARGET svf-ex APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(svf-ex PROPERTIES
  IMPORTED_LOCATION_RELEASE "/Users/runner/work/SVF/SVF/Release-build/bin/svf-ex"
  )

# Import target "llvm2svf" for configuration "Release"
set_property(TARGET llvm2svf APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(llvm2svf PROPERTIES
  IMPORTED_LOCATION_RELEASE "/Users/runner/work/SVF/SVF/Release-build/bin/llvm2svf"
  )

# Import target "mta" for configuration "Release"
set_property(TARGET mta APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(mta PROPERTIES
  IMPORTED_LOCATION_RELEASE "/Users/runner/work/SVF/SVF/Release-build/bin/mta"
  )

# Import target "saber" for configuration "Release"
set_property(TARGET saber APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(saber PROPERTIES
  IMPORTED_LOCATION_RELEASE "/Users/runner/work/SVF/SVF/Release-build/bin/saber"
  )

# Import target "wpa" for configuration "Release"
set_property(TARGET wpa APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(wpa PROPERTIES
  IMPORTED_LOCATION_RELEASE "/Users/runner/work/SVF/SVF/Release-build/bin/wpa"
  )

# Import target "ae" for configuration "Release"
set_property(TARGET ae APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(ae PROPERTIES
  IMPORTED_LOCATION_RELEASE "/Users/runner/work/SVF/SVF/Release-build/bin/ae"
  )

# Import target "SvfLLVM" for configuration "Release"
set_property(TARGET SvfLLVM APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(SvfLLVM PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
  IMPORTED_LOCATION_RELEASE "/Users/runner/work/SVF/SVF/Release-build/lib/libSvfLLVM.a"
  )

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
